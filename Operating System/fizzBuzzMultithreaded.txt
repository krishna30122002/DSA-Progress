#include <iostream>
#include <functional>
#include <mutex>
#include <condition_variable>
using namespace std;

class FizzBuzz {
private:
    int n;
    mutex m;
    condition_variable c;
    int i;
public:
    FizzBuzz(int n) {
        this->n = n;
        this->i = 1;
    }

    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz) {
        while(true) {
            unique_lock<mutex> lock(m);
            c.wait(lock, [&]() { return (i > n) || (i % 3 == 0 && i % 5 != 0); });
            if (i > n) break;
            printFizz();
            ++i;
            c.notify_all();
        }
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz) {
        while(true) {
            unique_lock<mutex> lock(m);
            c.wait(lock, [&]() { return (i > n) || (i % 3 != 0 && i % 5 == 0); });
            if (i > n) break;
            printBuzz();
            ++i;
            c.notify_all();
        }
    }

    // printFizzBuzz() outputs "fizzbuzz".
    void fizzbuzz(function<void()> printFizzBuzz) {
        while(true) {
            unique_lock<mutex> lock(m);
            c.wait(lock, [&]() { return (i > n) || (i % 3 == 0 && i % 5 == 0); });
            if (i > n) break;
            printFizzBuzz();
            ++i;
            c.notify_all();
        }
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber) {
        while(true) {
            unique_lock<mutex> lock(m);
            c.wait(lock, [&]() { return (i > n) || (i % 3 != 0 && i % 5 != 0); });
            if (i > n) break;
            printNumber(i);
            ++i;
            c.notify_all();
        }
    }
};
