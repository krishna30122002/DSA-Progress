class BSTIterator {
    private Stack<TreeNode> st=new Stack<>();
    private boolean reverse = true;
    public BSTIterator(TreeNode root, boolean rev) {
        this.reverse=rev;
        pushAllNodes(root);
    }
    
    public int next() {
        TreeNode temp = st.pop();
        if(reverse==false){
            pushAllNodes(temp.right);
        }else{
            pushAllNodes(temp.left);
        }
        return temp.val;
    }
    private void pushAllNodes(TreeNode root){
        while(root!=null){
            st.push(root);
            if(reverse==true){
                root=root.right;
            }else{
                root=root.left;
            }
        }
    }
}
class Solution {
    public boolean findTarget(TreeNode root, int key) {
        if(root==null){
            return false;
        }
        BSTIterator start=new BSTIterator(root,false);
        BSTIterator end=new BSTIterator(root,true);
        int i = start.next();
        int j = end.next();
        while(i<j){
            if((i+j)<key){
                i=start.next();
            }else if((i+j)>key){
                j=end.next();
            }else{
                return true;
            }
        }
        return false;
    }
}