class Solution {
    void solve(int i, int[] arr, List<List<Integer>> list, List<Integer> res, int n) {
        if (n == 0) {
            list.add(new ArrayList<>(res)); // Create a new copy of res
            return;
        }
        if (i == arr.length || n < 0) {
            return;
        }
        res.add(arr[i]);
        solve(i, arr, list, res, n-arr[i]);
        res.remove(res.size() - 1);
        solve(i + 1, arr, list, res, n);
    }

    public List<List<Integer>> combinationSum(int[] arr, int target) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        solve(0, arr, list, res, target);
        return list;
    }
}