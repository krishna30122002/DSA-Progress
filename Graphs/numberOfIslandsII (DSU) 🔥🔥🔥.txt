class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();

    public DisjointSet(int n) {
        for (int i = 0; i <= n; i++) {
            rank.add(0);
            parent.add(i);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}

class Solution {
    public List<Integer> numOfIslands(int rows, int cols, int[][] operators) {
        DisjointSet ds = new DisjointSet(rows * cols);
        int[][] vis = new int[rows][cols];
        
        int cnt = 0;
        List<Integer> res = new ArrayList<>();
        
        int len = operators.length;
        for (int i = 0; i < len; i++) {
            int r = operators[i][0];
            int c = operators[i][1];
            
            if (vis[r][c] == 1) {
                res.add(cnt);
                continue;
            }
            
            vis[r][c] = 1;
            cnt++;
            
            int[] dr = {-1, 0, 1, 0};
            int[] dc = {0, 1, 0, -1};
            
            for (int j = 0; j < 4; j++) {
                int adjRow = r + dr[j];
                int adjCol = c + dc[j];
                
                if (adjRow >= 0 && adjRow < rows && adjCol >= 0 && adjCol < cols) {
                    if (vis[adjRow][adjCol] == 1) {
                        int nodeId = (r * cols) + c;
                        int adjNodeId = (adjRow * cols) + adjCol;
                        if (ds.findUPar(nodeId) != ds.findUPar(adjNodeId)) {
                            cnt--;
                            ds.unionBySize(nodeId, adjNodeId);
                        }
                    }
                }
            }
            res.add(cnt);
        }
        return res;
    }
}