class Tuple {
    int first, second, third;
    Tuple(int _first, int _second, int _third) {
        this.first = _first;
        this.second = _second;
        this.third = _third;
    }
}
class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n = heights.length;
        int m = heights[0].length;

        int[][] dist = new int[n][m];
        PriorityQueue<Tuple> pq = new PriorityQueue<>((x, y) -> x.first - y.first);
        for (int[] row : dist) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        pq.offer(new Tuple(0, 0, 0));

        int[] dr = {-1, 0, 1, 0};
        int[] dc = {0, 1, 0, -1};

        while (!pq.isEmpty()) {
            Tuple t = pq.poll();
            int d = t.first;
            int r = t.second;
            int c = t.third;

            if (r == n - 1 && c == m - 1) {
                return d;
            }

            for (int i = 0; i < 4; i++) {
                int nrow = r + dr[i];
                int ncol = c + dc[i];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m) {
                    int newDiff = Math.max(d, Math.abs(heights[nrow][ncol] - heights[r][c]));
                    if (newDiff < dist[nrow][ncol]) {
                        dist[nrow][ncol] = newDiff;
                        pq.offer(new Tuple(newDiff, nrow, ncol));
                    }
                }
            }
        }
        return 0;
    }
}