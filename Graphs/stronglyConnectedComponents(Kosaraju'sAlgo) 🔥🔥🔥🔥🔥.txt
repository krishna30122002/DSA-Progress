class Solution
{
    private int timer = 0;

    public void solveDFS(int node, int parent, int[] vis, ArrayList<ArrayList<Integer>> adj, int[] time, int[] low, int[] mark){
        vis[node] = 1;
        time[node] = low[node] = timer++;
        int child = 0;

        for(Integer it : adj.get(node)){
            if(it == parent){
                continue;
            }
            if(vis[it] == 0){
                solveDFS(it, node, vis, adj, time, low, mark);
                low[node] = Math.min(low[node], low[it]);

                if(low[it] >= time[node] && parent != -1){
                    mark[node] = 1;
                }
                child++;
            }else{
                low[node] = Math.min(low[node], time[it]);
            }
        }
        if(parent == -1 && child > 1){
            mark[node] = 1;
        }
    }

    public ArrayList<Integer> articulationPoints(int n, ArrayList<ArrayList<Integer>> adj)
    {
        int[] vis = new int[n];
        int[] time = new int[n];
        int[] low = new int[n];
        int[] mark = new int[n];

        for(int i = 0; i < n; i++){
            if(vis[i] == 0){
                solveDFS(i, -1, vis, adj, time, low, mark);
            }
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0; i < n; i++){
            if(mark[i] == 1){
                ans.add(i);
            }
        }

        if(ans.size() == 0){
            ans.add(-1);
        }

        return ans;
    }
}
