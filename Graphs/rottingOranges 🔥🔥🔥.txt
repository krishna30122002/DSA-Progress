class Pair{
    int row;
    int col;
    int time;

    Pair(int row, int col, int time){
        this.row=row;
        this.col=col;
        this.time=time;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;

        int[][] vis=new int[n][m];
        Queue<Pair> q=new LinkedList<>();
        int cntFresh=0;
        int cnt=0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j,0));
                    vis[i][j]=2;
                }else{
                    vis[i][j]=0;
                }
                if(grid[i][j]==1){
                    cntFresh++;
                }
            }
        }
        if(cntFresh==0){
            return 0;
        }

        int[] dirRow={-1,0,1,0};
        int[] dirCol={0,1,0,-1};
        int time=0;
            
        while(!q.isEmpty()){
            int r=q.peek().row;
            int c=q.peek().col;
            time = q.peek().time;
            q.remove();

            for(int d=0; d<4; d++){
                int row=r+dirRow[d];
                int col=c+dirCol[d];
                if(row>=0 && row<n && col>=0 && col<m && vis[row][col]==0 && grid[row][col]==1){
                    q.add(new Pair(row,col,time+1));
                    vis[row][col]=2;
                    cnt++;
                }
            }
            
            if (!q.isEmpty()) {
            time = q.peek().time;
            }
        }
        if(cnt!=cntFresh){
            return -1;
        }
        return time;
    }
}