class Tuple{
    int first, second, third;
    Tuple(int _first, int _second, int _third){
        this.first=_first;
        this.second=_second;
        this.third=_third;
    }
}
class Solution {
    int shortestPath(int[][] grid, int[] source, int[] destination) {
        // Your code here
        if(source[0]==destination[0] && source[1]==destination[1]){
            return 0;
        }
        Queue<Tuple> q=new LinkedList<>();
        int n=grid.length;
        int m= grid[0].length;
        
        int[][] dist=new int[n][m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                dist[i][j]=(int)1e9;
            }
        }
        dist[source[0]][source[1]]=0;
        q.offer(new Tuple(0, source[0], source[1]));
        
        int[] dr={-1, 0, 1, 0};
        int[] dc={0, 1, 0, -1};
        
        while(!q.isEmpty()){
            Tuple t=q.poll();
            int d=t.first;
            int r=t.second;
            int c=t.third;
            
            for(int i=0; i<4; i++){
                int nrow=r+dr[i];
                int ncol=c+dc[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && (d+1)<dist[nrow][ncol]){
                    dist[nrow][ncol]=1+d;
                    if(nrow==destination[0] && ncol==destination[1]){
                        return d+1;
                    }
                    q.offer(new Tuple(d+1, nrow, ncol));
                }
            }
        }
        return -1;
    }
}