class Solution {
    public boolean dfs(int node, int choosenColor, int[] color, List<List<Integer>> adj){
        color[node]=choosenColor;

        for(int i : adj.get(node)){
            if(color[i]==-1){
                if(dfs(i, 1-choosenColor, color, adj)==false){
                    return false;
                }
            }else if(color[i]==choosenColor){
                return false;
            }
        }
        return true;
    }
    public boolean isBipartite(int[][] graph) {
        int v = graph.length;
        List<List<Integer>> adj = new ArrayList<>();
        for(int i=0; i<v; i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0; i<v; i++){
            for(int j : graph[i]){
                adj.get(i).add(j);
                adj.get(j).add(i);
            }
        }
        int[] color=new int[v];
        Arrays.fill(color,-1);
        for(int i=0; i<v; i++){
            if(color[i]==-1){
                if(dfs(i, 0, color, adj)==false){
                    return false;
                }
            }
        }
        return true;
    }
}