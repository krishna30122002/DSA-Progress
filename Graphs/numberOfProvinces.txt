class Solution {
    public void dfs(int node, List<List<Integer>> list, boolean[] vis){
        vis[node]=true;
        for(int i : list.get(node)){
            if(vis[i]==false){
                dfs(i,list,vis);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int v = isConnected.length;
        List<List<Integer>> list = new ArrayList<>();
        for(int i=0; i<v; i++){
            list.add(new ArrayList<Integer>());
        }
        for(int i=0; i<v; i++){
            for(int j=0; j<v; j++){
                if(isConnected[i][j] == 1 && i!=j) {
                    list.get(i).add(j);
                    list.get(j).add(i);
                }
            }
        }
        int cnt=0;
        boolean[] vis = new boolean[v];
        for(int i=0; i<v; i++){
            if(vis[i]==false){
                cnt++;
                dfs(i,list,vis);
            }
        }
        return cnt;
    }
}