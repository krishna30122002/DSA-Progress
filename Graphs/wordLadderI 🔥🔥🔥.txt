class Pair{
    String first;
    int second;

    Pair(String _first, int _second){
        this.first=_first;
        this.second=_second;
    }
}
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<Pair> q=new LinkedList<>();
        q.offer(new Pair(beginWord, 1));

        Set<String> set=new HashSet<>();
        for(int i=0; i<wordList.size(); i++){
            set.add(wordList.get(i));
        }
        set.remove(beginWord);

        while(!q.isEmpty()){
            String word=q.peek().first;
            int steps=q.peek().second;
            q.remove();

            if(word.equals(endWord)){
                return steps;
            }

            for(int i=0; i<word.length(); i++){
                for(char ch='a'; ch<='z'; ch++){
                    char[] charArr=word.toCharArray();
                    charArr[i]=ch;
                    String str=new String(charArr);
                    if(set.contains(str)){
                        set.remove(str);
                        q.offer(new Pair(str,steps+1));
                    }
                }
            }
        }
        return 0;
    }
}