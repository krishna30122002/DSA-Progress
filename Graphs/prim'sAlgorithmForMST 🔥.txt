class Pair{
    int first, second;
    Pair(int _first, int _second){
        first=_first;
        second=_second;
    }
}
class Solution {
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        // Code Here.
        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)-> x.first-y.first);
        int[] vis=new int[V];
        
        pq.add(new Pair(0, 0));
        int sum=0;
        
        while(!pq.isEmpty()){
            int wt=pq.peek().first;
            int node=pq.peek().second;
            pq.remove();
            
            if(vis[node]==1){
                continue;
            }
            
            vis[node]=1;
            sum+=wt;
            
            for(int[] it:adj.get(node)){
                int adjWt=it[1];
                int adjNode=it[0];
                
                if(vis[adjNode]==0){
                    pq.add(new Pair(adjWt, adjNode));
                }
            }
        }
        return sum;
    }
}