class Tuple {
    int first, second, third;
    Tuple(int _first, int _second, int _third) {
        this.first = _first;
        this.second = _second;
        this.third = _third;
    }
}

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;

        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) {
            return -1;
        }

        if (grid[0][0] == 0 && n == 1) {
            return 1;
        }

        int[][] dist = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j] = Integer.MAX_VALUE;
            }
        }

        Queue<Tuple> q = new LinkedList<>();
        q.offer(new Tuple(1, 0, 0));
        dist[0][0] = 1;

        int[] dr = {-1, -1, 0, 1, 1, 1, 0, -1};
        int[] dc = {0, 1, 1, 1, 0, -1, -1, -1};

        while (!q.isEmpty()) {
            Tuple t = q.poll();
            int d = t.first;
            int r = t.second;
            int c = t.third;

            for (int i = 0; i < 8; i++) {
                int nrow = r + dr[i];
                int ncol = c + dc[i];

                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < n && grid[nrow][ncol] == 0 && (d + 1) < dist[nrow][ncol]) {
                    dist[nrow][ncol] = d + 1;
                    if (nrow == n - 1 && ncol == n - 1) {
                        return dist[nrow][ncol];
                    }
                    q.offer(new Tuple(d + 1, nrow, ncol));
                }
            }
        }
        return -1;
    }
}