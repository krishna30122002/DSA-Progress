class Pair{
    int first, second;
    Pair(int f, int s){
        first=f;
        second=s;
    }
}
class Solution{
    public List<Integer> shortestPath(int n, int m, int edges[][]){
        //  Code Here.
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0; i<=n; i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0; i<m; i++){
            adj.get(edges[i][0]).add(new Pair(edges[i][1], edges[i][2]));
            adj.get(edges[i][1]).add(new Pair(edges[i][0], edges[i][2]));
        }
        
        PriorityQueue<Pair> pq=new PriorityQueue<>((x,y)->x.first-y.first);
        int[] dist=new int[n+1];
        int[] parent=new int[n+1];
        for(int i=1; i<=n; i++){
            dist[i]=(int)1e9;
            parent[i]=i;
        }
        dist[1]=0;
        pq.add(new Pair(0,1));
        
        while(pq.size()!=0){
            int dis=pq.peek().first;
            int node=pq.peek().second;
            pq.remove();
            for(Pair iter:adj.get(node)){
                int adjNode=iter.first;
                int adjDist=iter.second;
                if(adjDist+dis<dist[adjNode]){
                    dist[adjNode]=dis+adjDist;
                    pq.add(new Pair(dist[adjNode],adjNode));
                    parent[adjNode]=node;
                }
            }
        }
        List<Integer> path=new ArrayList<>();
        if(dist[n]==(int)1e9){
            path.add(-1);
            return path;
        }
        int node=n;
        while(parent[node]!=node){
            path.add(node);
            node=parent[node];
        }
        path.add(1);
        path.add(dist[n]);
        Collections.reverse(path);
        return path;
    }
}