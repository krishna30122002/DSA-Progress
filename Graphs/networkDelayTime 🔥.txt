class Pair {
    int first, second;
    Pair(int _first, int _second) {
        this.first = _first;
        this.second = _second;
    }
}

class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            adj.add(new ArrayList<>());
        }
        int m = times.length;
        for (int i = 0; i < m; i++) {
            adj.get(times[i][0]).add(new Pair(times[i][1], times[i][2]));
        }
        int[] time = new int[n + 1];
        Arrays.fill(time, (int) 1e9);
        time[k] = 0;

        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> x.first - y.first);
        pq.offer(new Pair(0, k));
        while (!pq.isEmpty()) {
            int t = pq.peek().first;
            int node = pq.peek().second;
            pq.poll();

            for (Pair pair : adj.get(node)) {
                int adjNode = pair.first;
                int adjTime = pair.second;
                if (t + adjTime < time[adjNode]) {
                    time[adjNode] = t + adjTime;
                    pq.offer(new Pair(time[adjNode], adjNode));
                }
            }
        }

        int totalTime = 0;
        for (int i = 1; i <= n; i++) {
            if (time[i] == (int) 1e9) {
                return -1;
            } else {
                totalTime = Math.max(totalTime, time[i]);
            }
        }
        return totalTime;
    }
}
