class Solution {
    private int timer=0;
    
    public void solveDFS(int node, int parent, int[] vis, List<List<Integer>> adj, int[] time, int[] low, List<List<Integer>> bridges){
        vis[node]=1;
        time[node]=low[node]=timer;
        timer++;

        for(Integer it:adj.get(node)){
            if(it==parent){
                continue;
            }
            if(vis[it]==0){
                solveDFS(it, node, vis, adj, time, low, bridges);
                low[node]=Math.min(low[node], low[it]);

                if(low[it]>time[node]){
                    bridges.add(Arrays.asList(node, it));
                }
            }else{
                low[node]=Math.min(low[node], low[it]);
            }
        }
        return;
    } 
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        for(List<Integer> it : connections){
            int u=it.get(0);
            int v=it.get(1);
            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        List<List<Integer>> bridges=new ArrayList<>();
        int[] vis=new int[n];
        int[] time=new int[n];
        int[] low=new int[n];

        solveDFS(0, -1, vis, adj, time, low, bridges);
        return bridges;
    }
}