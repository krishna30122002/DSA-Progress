class Pair{
    int first,second;
    Pair(int f, int s){
        first=f;
        second=s;
    }
}
class Solution {
    public void topoSort(int node, List<List<Pair>> adj, int[] vis, Stack<Integer> st){
        vis[node]=1;
        for(int i=0; i<adj.get(node).size(); i++){
            int v=adj.get(node).get(i).first;
            if(vis[v]==0){
                topoSort(v, adj, vis, st);
            }
        }
        st.push(node);
        return;
    }
	public int[] shortestPath(int n, int m, int[][] edges) {
		//Code here
		List<List<Pair>> adj=new ArrayList<>();
		for(int i=0; i<n; i++){
		    List<Pair> temp=new ArrayList<>();
		    adj.add(temp);
		}
		for(int i=0; i<m; i++){
		    int u=edges[i][0];
		    int v=edges[i][1];
		    int wt=edges[i][2];
		    adj.get(u).add(new Pair(v, wt));
		}
		
		int[] vis=new int[n];
		Stack<Integer> st=new Stack<>();
		for(int i=0; i<n; i++){
		    if(vis[i]==0){
		        topoSort(i, adj, vis, st);
		    }
		}
		
		int[] dist=new int[n];
		Arrays.fill(dist, (int)1e9);
		dist[0]=0;
		
		while(!st.isEmpty()){
		    int node=st.peek();
		    st.pop();
		    for(int i=0; i<adj.get(node).size(); i++){
		        int v=adj.get(node).get(i).first;
		        int wt=adj.get(node).get(i).second;
		        
		        if(dist[node]+wt<dist[v]){
		            dist[v]=wt+dist[node];
		        }
		    }
		}
		
		for(int i=0; i<n; i++){
		    if(dist[i]==(int)1e9){
		        dist[i]=-1;
		    }
		}
		return dist;
	}
}