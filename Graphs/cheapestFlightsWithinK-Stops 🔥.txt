class Pair{
    int first, second;
    Pair(int _first, int _second){
        this.first=_first;
        this.second=_second;
    }
}
class Tuple{
    int first, second, third;
    Tuple(int _first, int _second, int _third){
        this.first=_first;
        this.second=_second;
        this.third=_third;
    }
}
class Solution {
    public int CheapestFLight(int n,int flights[][],int src,int dst,int k) {
        // Code here
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        
        int m=flights.length;
        for(int i=0; i<m; i++){
            adj.get(flights[i][0]).add(new Pair(flights[i][1], flights[i][2]));
        }
        
        Queue<Tuple> q=new LinkedList<>();
        q.offer(new Tuple(0, src, 0));
        
        int[] dist=new int[n];
        Arrays.fill(dist, (int)1e9);
        dist[src]=0;
        
        while(!q.isEmpty()){
            Tuple t=q.poll();
            int cost=t.first;
            int node=t.second;
            int stops=t.third;
            
            if(stops>k){
                continue;
            }
            
            for(Pair p:adj.get(node)){
                int adjNode=p.first;
                int adjCost=p.second;
                
                if(cost+adjCost<dist[adjNode] && stops<=k){
                    dist[adjNode]=adjCost+cost;
                    q.offer(new Tuple(cost+adjCost, adjNode, stops+1));
                }
            }
        }
        
        if(dist[dst]==(int)1e9){
            return -1;
        }
        return dist[dst];
    }
}