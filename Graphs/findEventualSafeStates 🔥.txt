class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> revAdj=new ArrayList<>();
        int[] inDegree=new int[graph.length];
        for(int i=0; i<graph.length; i++){
            revAdj.add(new ArrayList<>());
        }
        for (int i = 0; i < graph.length; i++) {
            for (int j = 0; j < graph[i].length; j++) {
                revAdj.get(graph[i][j]).add(i);
                inDegree[i]++;
            }
        }
        List<Integer> list=new ArrayList<>();
        Queue<Integer> q=new LinkedList<>();
        for (int i = 0; i < graph.length; i++) {
            if(inDegree[i]==0){
                q.offer(i);
            }
        }
        while(!q.isEmpty()){
            int node=q.poll();
            list.add(node);
            for(int it:revAdj.get(node)){
                inDegree[it]--;
                if(inDegree[it]==0){
                    q.add(it);
                }
            }
        }
        Collections.sort(list);
        return list;
    }
}