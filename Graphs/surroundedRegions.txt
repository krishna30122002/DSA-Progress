class Solution {
    public void dfs(int row, int col, int n, int m, int[][] vis, char[][] board, int[] delRow, int[] delCol){
        vis[row][col]=1;
        for(int i=0; i<4; i++){
            int nRow=row+delRow[i];
            int nCol=col+delCol[i];

            if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && vis[nRow][nCol]==0 && board[nRow][nCol]=='O'){
               dfs(nRow,nCol,n,m,vis,board,delRow,delCol); 
            }
        }
    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;

        int[] delRow={-1,0,+1,0};
        int[] delCol={0,+1,0,-1};
        int[][] vis=new int[n][m];

        //for cols
        for(int i=0; i<n; i++){
            //for first col
            if(vis[i][0]==0 && board[i][0]=='O'){
                dfs(i,0,n,m,vis,board,delRow,delCol);
            }
            //for last col
            if(vis[i][m-1]==0 && board[i][m-1]=='O'){
                dfs(i,m-1,n,m,vis,board,delRow,delCol);
            }
        }

        //for rows
        for(int j=0; j<m; j++){
            //for first row
            if(vis[0][j]==0 && board[0][j]=='O'){
                dfs(0,j,n,m,vis,board,delRow,delCol);
            }
            //for last row
            if(vis[n-1][j]==0 && board[n-1][j]=='O'){
                dfs(n-1,j,n,m,vis,board,delRow,delCol);
            }
        }

        //replacing in board matrix
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(vis[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        return;
    }
}