class Pair{
    int first, second;
    Pair(int _first, int _second){
        this.first=_first;
        this.second=_second;
    }
}
class Solution {
    int minimumMultiplications(int[] arr, int start, int end) {
        // Your code here
        int n = arr.length;
        Queue<Pair> q = new LinkedList<>(); 
        q.add(new Pair(0, start));
        int[] dist = new int[100000]; 
        Arrays.fill(dist, (int)(1e9));
        dist[start] = 0; 
        int mod = 100000;
        while(!q.isEmpty()) {
            int steps = q.peek().first;
            int node = q.peek().second; 
            q.remove(); 
            
            if(node==end){
                return steps;
            }
            
            for(int i = 0; i < n; i++) {
                int num = (arr[i] * node) % mod;
                if(steps + 1 < dist[num]) {
                    dist[num] = steps + 1;
                    q.add(new Pair(steps + 1, num)); 
                }
            }
        }
        return -1; 
    }
}