class DisjointSet {
    List<Integer> rank = new ArrayList<>();
    List<Integer> parent = new ArrayList<>();
    List<Integer> size = new ArrayList<>();
    public DisjointSet(int n) {
        for (int nRow = 0; nRow <= n; nRow++) {
            rank.add(0);
            parent.add(nRow);
            size.add(1);
        }
    }

    public int findUPar(int node) {
        if (node == parent.get(node)) {
            return node;
        }
        int ulp = findUPar(parent.get(node));
        parent.set(node, ulp);
        return parent.get(node);
    }

    public void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank.get(ulp_u) < rank.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
        } else if (rank.get(ulp_v) < rank.get(ulp_u)) {
            parent.set(ulp_v, ulp_u);
        } else {
            parent.set(ulp_v, ulp_u);
            int rankU = rank.get(ulp_u);
            rank.set(ulp_u, rankU + 1);
        }
    }

    public void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size.get(ulp_u) < size.get(ulp_v)) {
            parent.set(ulp_u, ulp_v);
            size.set(ulp_v, size.get(ulp_v) + size.get(ulp_u));
        } else {
            parent.set(ulp_v, ulp_u);
            size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
        }
    }
}

class Solution {
    public int largestIsland(int[][] grid) {
        int n=grid.length;
        DisjointSet ds=new DisjointSet(n*n);

        for(int row=0; row<n; row++){
            for(int col=0; col<n; col++){
                if(grid[row][col]==0){
                    continue;
                }
                int[] dr={-1, 0, 1, 0};
                int[] dc={0, 1, 0, -1};
                for(int idx=0; idx<4; idx++){
                    int nRow=row+dr[idx];
                    int nCol=col+dc[idx];

                    if(nRow>=0 && nRow<n && nCol>=0 && nCol<n && grid[nRow][nCol]==1){
                        int nodeId=(row*n)+col;
                        int newNodeId=(nRow*n)+nCol;
                        ds.unionBySize(nodeId, newNodeId);
                    }
                }
            }
        }

        int maxi=0;
        for(int row=0; row<n; row++){
            for(int col=0; col<n; col++){
                if(grid[row][col]==1){
                    continue;
                }
                int[] dr={-1, 0, 1, 0};
                int[] dc={0, 1, 0, -1};
                
                HashSet<Integer> components=new HashSet<>();
                for(int idx=0; idx<4; idx++){
                    int nRow=row+dr[idx];
                    int nCol=col+dc[idx];

                    if(nRow>=0 && nRow<n && nCol>=0 && nCol<n){
                        if(grid[nRow][nCol]==1){
                            components.add(ds.findUPar((nRow*n)+nCol));
                        }
                    }
                }
                int totalSize=0;
                for(Integer parents : components){
                    totalSize+=ds.size.get(parents);
                }
                maxi=Math.max(maxi, totalSize+1);
            }
        }

        for(int cellNo=0; cellNo<(n*n); cellNo++){
            maxi=Math.max(maxi, ds.size.get(cellNo));
        }

        return maxi;
    }
}