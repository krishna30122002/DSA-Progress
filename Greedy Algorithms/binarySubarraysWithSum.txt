// class Solution {
//     public int numSubarraysWithSum(int[] nums, int goal) {
//         int n = nums.length;
//         int cnt=0;
//         int[] preSum=new int[n+1];
//         preSum[0]=0;
//         for(int i = 1; i<=n;i++){
//             preSum[i]=preSum[i-1]+nums[i-1];
//         }
//         for(int i = 0; i<n;i++){
//             for(int j = i+1; j<=n; j++){
//                 if((preSum[j]-preSum[i])==goal){
//                     cnt++;
//                 }
//             }
//         }
//         return cnt;
//     }
// }

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        int n = nums.length;
        int cnt=0;
        int sum=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        for(int i = 0; i<n;i++){
            sum+=nums[i];
            cnt+=map.getOrDefault((sum-goal),0);
            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return cnt;
    }
}