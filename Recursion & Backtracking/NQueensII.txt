public class Solution {
    public boolean isSafe(int row, int col, int n, int[][] temp) {
        int duprow = row;
        int dupcol = col;

        while (row >= 0 && col >= 0) {
            if (temp[row][col] == 1) {
                return false;
            }
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;

        while (col >= 0) {
            if (temp[row][col] == 1) {
                return false;
            }
            col--;
        }

        row = duprow;
        col = dupcol;

        while (row < n && col >= 0) {
            if (temp[row][col] == 1) {
                return false;
            }
            row++;
            col--;
        }

        return true;
    }

    public List<Integer> listConvert(int[][] arr){
        List<Integer> res=new ArrayList<>();
        for(int[] row:arr){
            for(int n:row){
                res.add(n);
            }
        }
        return res;
    }

    public void solve(int col, int n, int[][] temp, int[] arr, List<List<Integer>> list) {
        if (col == n) {
            arr[0]++;
            return;
        }
        for (int row = 0; row < n; row++) {
            if (isSafe(row, col, n, temp)) {
                temp[row][col]=1;
                solve(col + 1, n, temp, arr, list);
                temp[row][col]=0;
            }
        }
    }

    public int totalNQueens(int n) {
        List<List<Integer>> list = new ArrayList<>();
        int[][] temp=new int[n][n];
        int[] arr=new int[1];
        solve(0, n, new int[n][n], arr, list);
        return arr[0];
    }
}