// OUT OF THE LEAGUE SOLUTION

// NEED TO GO THROUGH AGAIN

// EXTREME LEVEL QUESTION

// I need to Practice the TreeMap And Priority Queues

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Tuple{
    TreeNode node;
    int row;
    int col;
    Tuple(TreeNode newNode, int newRow, int newCol){
        node=newNode;
        row=newRow;
        col=newCol;
    }
}
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> mp=new TreeMap<>();
        // Queue (root,x-position,level)
        Queue<Tuple> queue = new LinkedList<>();
        queue.add(new Tuple(root,0,0));
        while(!queue.isEmpty()){
            Tuple t = queue.poll();
            TreeNode node=t.node;
            int x=t.row;
            int y=t.col;

            if(!mp.containsKey(x)){
                mp.put(x,new TreeMap<>());
            }
            if(!mp.get(x).containsKey(y)){
                mp.get(x).put(y, new PriorityQueue<>());
            }
            mp.get(x).get(y).add(node.val);
            if(node.left!=null){
                queue.add(new Tuple((node.left),x-1,y+1));
            }
            if(node.right!=null){
                queue.add(new Tuple((node.right),x+1,y+1));
            }
        }
        List<List<Integer>> list = new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> i : mp.values()){
            list.add(new ArrayList<>());
            for(PriorityQueue<Integer> curr : i.values()){
                    while(!curr.isEmpty()){
                        list.get(list.size()-1).add(curr.poll());
                    }
                }    
            }    
        return list;
    }
}