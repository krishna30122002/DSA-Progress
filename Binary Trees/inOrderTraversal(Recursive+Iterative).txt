/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Recursive Approach

// class Solution {
//     public void solve(List<Integer> list, TreeNode root) {
//         if(root == null){
//             return;
//         }
//         solve(list,root.left);
//         list.add(root.val);
//         solve(list,root.right);
//         return;
//     }
//     public List<Integer> inorderTraversal(TreeNode root) {
//         List<Integer> list = new ArrayList<>();
//         solve(list,root);
//         return list;
//     }
// }

// Iterative Approach
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Stack<TreeNode> st = new Stack<TreeNode>();
        List<Integer> list = new ArrayList<>();
        if(root==null){
            return list;
        }
        TreeNode node = root;
        while(true){
            if(node!=null){
                st.push(node);
                node=node.left;
            }else{
                if(st.isEmpty()){
                    break;
                }
                node = st.pop();
                list.add(node.val);
                node=node.right;
            }
        }
        return list;
    }
}