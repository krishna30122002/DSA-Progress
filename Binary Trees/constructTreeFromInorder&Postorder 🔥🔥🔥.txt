class Solution {

    public TreeNode solve(int[] postorder, int postStart, int postEnd, int[] inorder, int inStart, int inEnd, Map<Integer,Integer> map){
        if((postStart>postEnd) || (inStart>inEnd)){
            return null;
        }
        TreeNode root = new TreeNode(postorder[postEnd]);
        int inRoot = map.get(root.val);
        int numLeft = inRoot-inStart;

        root.left=solve(postorder,postStart,postStart+numLeft-1,inorder,inStart,inRoot-1,map);
        root.right=solve(postorder,postStart+numLeft,postEnd-1,inorder,inRoot+1,inEnd,map);

        return root;
    }

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<inorder.length; i++){
            map.put(inorder[i],i);
        }
        TreeNode root = solve(postorder,0,postorder.length-1,inorder,0,inorder.length-1,map);
        return root;
    }
}