class Pair {
    TreeNode node;
    int position;

    Pair(TreeNode newNode, int newPosition) {
        this.node = newNode;
        this.position = newPosition;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        Queue<Pair> queue=new LinkedList<>();
        int cnt=0;
        queue.offer(new Pair(root,0));
        while(!queue.isEmpty()){
            int mini=queue.peek().position;
            int size=queue.size();
            int c1=0;
            int c2=0;
            for(int i=0; i<size; i++){
                int idx=queue.peek().position - mini;
                TreeNode node=queue.peek().node;
                queue.poll();
                if(i==0){
                    c1=idx;
                }
                if(i==(size-1)){
                    c2=idx;
                }
                if(node.left!=null){
                    queue.offer(new Pair(node.left,(2*idx)+1));
                }
                if(node.right!=null){
                    queue.offer(new Pair(node.right,(2*idx)+2));
                }
            }
            cnt=Math.max(cnt,(c2-c1+1));
        }
        return cnt;
    }
}