class Solution {
    public void parents(TreeNode root, Map<TreeNode,TreeNode> map){
        Queue<TreeNode> queue=new LinkedList<>();
        map.put(root,null);
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode node = queue.poll();
            if(node.left!=null){
                map.put(node.left,node);
                queue.add(node.left);
            }
            if(node.right!=null){
                map.put(node.right,node);
                queue.add(node.right);
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        if(k==0){
            return new ArrayList<Integer>(Arrays.asList(target.val));
        } 
        Map<TreeNode,TreeNode> map = new HashMap<>();
        parents(root,map);
        HashSet<TreeNode> visited=new HashSet<>();
        Queue<TreeNode> queue = new LinkedList<>();
        visited.add(target);
        queue.add(target);
        int cnt=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i = 0; i<size; i++){
                TreeNode node = queue.poll();
                if(node.left!=null && !visited.contains(node.left)){
                    queue.add(node.left);
                    visited.add(node.left);
                }
                if(node.right!=null && !visited.contains(node.right)){
                    queue.add(node.right);
                    visited.add(node.right);
                }
                if(!visited.contains(map.get(node))){
                    if(map.get(node)!=null){
                        queue.add(map.get(node));
                        visited.add(map.get(node));
                    }
                }
            }
            cnt++;
            if(cnt==k){
                break;
            }
        }
        List<Integer> list = new ArrayList<>();
        while(!queue.isEmpty()){
            TreeNode temp=queue.poll();
            list.add(temp.val);
        }
        return list;
    }
}