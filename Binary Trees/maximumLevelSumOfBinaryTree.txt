class Pair{
    int val;
    int lvl;
    Pair(int val, int lvl){
        this.val=val;
        this.lvl=lvl;
    }
}
class Solution {
    public int maxLevelSum(TreeNode root) {
        List<Pair> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if(root==null){
            return 0;
        }
        queue.offer(root);
        int idx=1;
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0; i<size; i++){
                if(queue.peek().left!=null){
                    queue.offer(queue.peek().left);
                }
                if(queue.peek().right!=null){
                    queue.offer(queue.peek().right);
                }
                temp.add(queue.poll().val);
            }
            int sum=0;
            for(int i=0; i<temp.size(); i++){
                sum+=temp.get(i);
            }
            list.add(new Pair(sum,idx));
            temp=new ArrayList<>();
            idx++;
        }
        int ans=0;
        int x=Integer.MIN_VALUE;
        for(int i=0; i<list.size(); i++){
            Pair p=list.get(i);
            if(p.val>x){
                x=Math.max(p.val,x);
                ans=p.lvl;
            }
        }
        return ans;
    }
}