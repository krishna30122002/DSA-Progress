import java.util.List;
import java.util.ArrayList;
import java.util.Stack;

public class Solution {
    public static boolean isLeaf(TreeNode root){
    if((root.left==null) && (root.right==null)){
    return true;
    }
    return false;
    }
    public static void addLeftBoundary(TreeNode root, ArrayList<Integer> res) {
        TreeNode node = root.left;
        while (node != null) {
            if (isLeaf(node) == false)
                res.add(node.data);
            if (node.left != null)
                node = node.left;
            else
                node = node.right;
        }
    }

    public static void addRightBoundary(TreeNode root, ArrayList<Integer> res) {
        TreeNode node = root.right;
        ArrayList<Integer> temp = new ArrayList<Integer>();
        while (node != null) {
            if (isLeaf(node) == false)
                temp.add(node.data);
            if (node.right != null)
                node = node.right;
            else
                node = node.left;
        }
        int i;
        for (i = temp.size() - 1; i >= 0; --i) {
            res.add(temp.get(i));
        }
    }

    static void addLeaves(TreeNode root, ArrayList<Integer> res) {
        if (isLeaf(root)) {
            res.add(root.data);
            return;
        }
        if (root.left != null)
            addLeaves(root.left, res);
        if (root.right != null)
            addLeaves(root.right, res);
    }
    public static List<Integer> traverseBoundary(TreeNode node){
        ArrayList < Integer > ans = new ArrayList < Integer > ();
        if (isLeaf(node) == false) ans.add(node.data);
        addLeftBoundary(node, ans);
        addLeaves(node, ans);
        addRightBoundary(node, ans);
        return ans;
    }
}