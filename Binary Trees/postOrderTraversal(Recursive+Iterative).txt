/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

// Recursive Approach

// class Solution {
//     public void solve(List<Integer> list, TreeNode root) {
//         if(root == null){
//             return;
//         }
//         solve(list,root.left);
//         solve(list,root.right);
//         list.add(root.val);
//         return;
//     }
//     public List<Integer> postorderTraversal(TreeNode root) {
//         List<Integer> list = new ArrayList<>();
//         solve(list,root);
//         return list;
//     }
// }

// Iterative Approach - 2 Stack

// class Solution {
//     public List<Integer> postorderTraversal(TreeNode root) {
//         List<Integer> list = new ArrayList<>();
//         Stack<TreeNode> st1 = new Stack<TreeNode>();
//         Stack<TreeNode> st2 = new Stack<TreeNode>();
//         TreeNode node = root;
//         st1.push(root);
//         if(root==null){
//             return list;
//         }
//         while(!st1.isEmpty()){
//             node = st1.pop();
//             st2.push(node);
//             if(node.left!=null){
//                 st1.push(node.left);
//             }
//             if(node.right!=null){
//                 st1.push(node.right);
//             }
//         }
//         while(!st2.isEmpty()){
//             list.add(st2.pop().val);
//         }
//         return list;
//     }
// }

// Iterative Approach - 1 Stack

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root==null){
            return list; 
        }
        TreeNode curr=root;
        Stack<TreeNode> st = new Stack<>();
        while(curr!=null || !st.isEmpty()){
            if(curr!=null){
                st.push(curr); 
                curr=curr.left; 
            } 
            else{
                TreeNode temp=st.peek().right;
                if(temp==null){
                    temp=st.peek();
                    st.pop();
                    list.add(temp.val); 
                    while(!st.isEmpty() && temp==st.peek().right){
                        temp=st.peek();
                        st.pop();
                        list.add(temp.val);
                    }
                } 
                else{
                    curr=temp; 
                }
            }
        }
        return list;
    }
}