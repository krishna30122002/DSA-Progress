class Solution {
    static int[][] direction=new int[][]{{-1,1},{0,-1},{0,1},{-1,-1},{-1,0},{1,-1},{1,0},{1,1}};
    public void gameOfLife(int[][] board) {
        int m=board.length;
        int n=board[0].length;
        int[][] result=new int[m][n];
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int cnt=0;
                for(int[] row:direction){
                    int x=i+row[0];
                    int y=j+row[1];
                    if(x>=0 && x<m && y>=0 && y<n && board[x][y]==1){
                        cnt++;
                    }
                }
                if(board[i][j]==1){
                    if(cnt==2 || cnt==3){
                        result[i][j]=1;
                    }
                }else{
                    if(cnt==3){
                        result[i][j]=1;
                    }
                }
            }
        }
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                board[i][j]=result[i][j];
            }
        }
        return;
    }
}

// class Solution {
//     public void solve(int[] arr, int i, int j, int m, int n){
//         int left=(i>0 && j>0)?arr[i][j-1]:-1;      
//         int right=(i>0 && j>0)?arr[i][j+1]:-1;  
//         int down=(i>0 && j>0)?arr[i+1][j]:-1; 
//         int up=(i>0 && j>0)?arr[i-1][j]:-1;        
//         int diagLT=(i>0 && j>0)?arr[i-1][j-1]:-1;
//         int diagRT=(i>0 && j>0)?arr[i-1][j+1]:-1;
//         int diagBR=(i>0 && j>0)?arr[i+1][j+1]:-1;
//         int diagBL=(i>0 && j>0)?arr[i+1][j-1]:-1;
//         if(arr[i][j-1])
//     }
//     public void gameOfLife(int[][] board) {
//         int m=board.length;
//         int n=board[0].length;
//         for(int i=0; i<m; i++){
//             for(int j=0; j<n; j++){
//                 solve(board,i,j,m,n);
//             }
//         }
//         return;
//     }
// }
