// recursive approach

// class Solution {
//     public void solve(int[] arr, int i, List<Integer> res, List<List<Integer>> list) {
//         if (i == arr.length) {
//             list.add(new ArrayList<>(res));
//             return;
//         }
//         res.add(arr[i]);
//         solve(arr, i + 1, res, list);
//         res.remove(res.size() - 1);
//         solve(arr, i + 1, res, list);
//     }

//     public List<List<Integer>> subsets(int[] nums) {
//         List<List<Integer>> list = new ArrayList<>();
//         List<Integer> res = new ArrayList<>();
//         solve(nums, 0, res, list);
//         return list;
//     }
// }

// bitwise approach

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        int n=nums.length;
        List<List<Integer>> list = new ArrayList<>();
        int subsets=1<<n;
        for(int num=0; num<subsets; num++){
            List<Integer> temp = new ArrayList<>();
            for(int i=0; i<n; i++){
                if((num & (1<<i))!=0){
                    temp.add(nums[i]);
                }
            }
            list.add(temp);
        }     
        return list;
    }
}