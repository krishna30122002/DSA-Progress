public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head==null || head.next==null){
            return null;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(slow==fast){
                slow=head;
                while(slow!=fast){
                    fast=fast.next;
                    slow=slow.next;
                }
                return slow;
            }
        }
        return null;
    }
}

// public class Solution {
//     public ListNode detectCycle(ListNode head) {
//         HashMap<ListNode, Integer> map=new HashMap<>();
//         ListNode curr=head;
//         while(curr!=null){
//             if(map.containsKey(curr)){
//                 return curr;
//             }else{
//                 map.put(curr, map.getOrDefault(curr, 0)+1);
//             }
//             curr=curr.next;
//         }
//         return null;
//     }
// }