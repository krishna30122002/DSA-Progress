class Solution {
    public ListNode findMiddle(ListNode head){
        ListNode slow=head;
        ListNode fast=head.next; // important

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode merge(ListNode leftHead, ListNode rightHead){
        ListNode dummy=new ListNode(-1);
        ListNode temp=dummy;

        while(leftHead!=null && rightHead!=null){
            if(leftHead.val<rightHead.val){
                temp.next=leftHead;
                temp=leftHead;
                leftHead=leftHead.next;
            }else{
                temp.next=rightHead;
                temp=rightHead;
                rightHead=rightHead.next;
            }
        }
        if(leftHead!=null){
            temp.next=leftHead;
        }else{
            temp.next=rightHead;
        }
        return dummy.next;
    }
    public ListNode mergeSort(ListNode head){
        if(head==null || head.next==null){
            return head;
        }

        ListNode mid=findMiddle(head);
        ListNode left=head;
        ListNode right=mid.next;
        mid.next=null;

        ListNode leftHead=mergeSort(left);
        ListNode rightHead=mergeSort(right);

        return merge(leftHead, rightHead);
    }
    public ListNode sortList(ListNode head) {
        return mergeSort(head);
    }
}