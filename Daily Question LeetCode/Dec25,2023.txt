// Decode Ways

// class Solution {
//     public int numDecodings(String s) {
//         int n = s.length();
//         int[] dp = new int[n];
//         if(n==2 && s.charAt(0)=='0' && s.charAt(1)!='0'){
//             return 0;
//         }
//         if(s.charAt(0)!='0'){
//             dp[0]=1;
//         }else{
//             dp[0]=0;
//         }
        
//         for(int i = 1; i<n; i++){
//             if(s.charAt(i-1)=='0' && s.charAt(i)=='0'){
//                 dp[i]=0;
//             }else if(s.charAt(i-1)=='0' && s.charAt(i)!='0'){
//                 dp[i]=dp[i-1];
//             }else if(s.charAt(i-1)!='0' && s.charAt(i)=='0'){
//                 if(s.charAt(i-1)=='1' || s.charAt(i-1)=='2'){
//                     if(i>=2){
//                         dp[i]=dp[i-2];
//                     }else{
//                         dp[i]=1;
//                     }
//                 }
//             }else{
//                 if(Integer.parseInt(s.substring(i-1,i+1))<=26){
//                     if(i>=2){
//                         dp[i]=dp[i-2]+dp[i-1];
//                     }else{
//                         dp[i]=1+dp[i-1];
//                     }
//                 }else{
//                     dp[i]=dp[i-1];
//                 }
//             }
//         }
//         return dp[n-1];
//     }
// }

class Solution {
    public int solve(String s, int idx, int[] dp) {
        if (idx < 0) {
            return 1; 
        }
        if (dp[idx] != -1) {
            return dp[idx];
        }
        int cnt = 0;

        if (s.charAt(idx) != '0') {
            cnt += solve(s, idx - 1, dp);
        }
        if (idx > 0 && (s.charAt(idx - 1) == '1' || (s.charAt(idx - 1) == '2' && s.charAt(idx) <= '6'))) {
            cnt += solve(s, idx - 2, dp);
        }
        dp[idx] = cnt;
        return cnt;
    }
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) {
            return 0;
        }
        int[] dp = new int[n];
        Arrays.fill(dp, -1);
        return solve(s, n - 1, dp);
    }
}
