// K Inverse Pairs Array

// I DON'T KNOW BUT I AM NOT ABLE TO DO THIS QUESTION EVEN AFTER UNDERSTANDING CLOSELY

// I AM FEELING SORRY FOR MYSELF

// class Solution {
//     final int mod=1000000007;
//     public int[][] dp;
//     public int kInversePairs(int n, int k) {
//         dp=new int[n+1][k+1];
//         dp[0][0]=1;
//         for(int i=1; i<=n; i++){
//             for(int j=0; j<=k; j++){
//                 if(j==0){
//                     dp[i][j]=1;
//                 }else{
                    
//                 }
//                 for(int l=0; l<Math.min(j,n-1); l++){
//                     dp[i][j]=(dp[i][j]+dp[i-1][j-1])%mod;
//                 }
//             }
//         }
//         return dp[n][k];
//     }
// }

// class Solution {
//     public int mod=1000000007;
//     public int[][] dp=new int[1001][1001];

//     public int solve(int n,int k,int[][] dp){
//         if(k<=0){
//             if(k==0){
//                 return 1;
//             }
//             return 0;
//         }
//         if (dp[n][k]!=-1){
//             return dp[n][k];
//         }
//         int cnt=0;
//         for (int i=0; i<n; i++){
//             cnt+=solve(n-1,k-i,dp);
//             cnt%=mod;
//         }
//         // dp[n][k]=cnt;
//         return dp[n][k]=cnt;
//     }

//     public int kInversePairs(int n, int k) {
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         return solve(n,k,dp);
//     }
// }

class Solution {
    public int mod=1000000007;
    public int solve(int n,int k,int[][] dp){
        if(n==0){
            return 0;
        }
        if (k==0){
            return 1;
        }
        if(dp[n][k]!=-1){
            return dp[n][k];
        } 

        int cnt=0;
        for(int i=0; i<=Math.min(k,n-1); i++){
            cnt=(cnt+solve(n-1,k-i,dp))%mod;
        }
        dp[n][k]=cnt;
        return dp[n][k];
    }
    public int kInversePairs(int n, int k) {
        int[][] dp=new int[1001][1001];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(n,k,dp);
    }
}
