// Find All People With Secret

class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        List<List<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++) adj.add(new ArrayList<>());

        for(int[] arr:meetings){
            adj.get(arr[0]).add(new Pair(arr[1],arr[2]));
            adj.get(arr[1]).add(new Pair(arr[0],arr[2]));
        }

        int[] vis=new int[n];
        Arrays.fill(vis,Integer.MAX_VALUE);
        vis[0]=0;
        vis[firstPerson]=0;

        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(0,0));
        q.add(new Pair(firstPerson,0));
        while(!q.isEmpty()){
            Pair pair=q.poll();
            int person=pair.first;
            int time=pair.second;
            for (Pair i : adj.get(person)) {
                int nextOne = i.first;
                int t = i.second;
                if (t>=time && vis[nextOne]>t) {
                    vis[nextOne]=t;
                    q.add(new Pair(nextOne,t));
                }
            }
        }
        List<Integer> res=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(vis[i]!=Integer.MAX_VALUE){
                res.add(i);
            } 
        }
        return res;
    }
}