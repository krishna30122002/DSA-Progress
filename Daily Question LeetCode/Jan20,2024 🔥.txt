//Sum of Subarray Minimums

class Solution {
    public int sumSubarrayMins(int[] nums) {
        long sum=0;
        int modulus=1000000007;
        int n=nums.length;
        Stack<Integer> st=new Stack<Integer>();
        int leftArr[]=new int[n];
        int rightArr[]=new int[n];
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && nums[i]<nums[st.peek()]){
                st.pop();
            }
            if(st.isEmpty()){
                leftArr[i]=-1;
            }
            else{
                leftArr[i]=st.peek();
            }
            st.push(i);
        }
        for(int i=0;i<leftArr.length;i++){
            System.out.print(leftArr[i]+" ");
        }
        System.out.println();
        
        st.clear();

        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && nums[i]<=nums[st.peek()]){
                st.pop();
            }
            if(st.isEmpty()){
                rightArr[i]=n;
            }
            else{
                rightArr[i]=st.peek();
            }
            st.push(i);
        }
        st.clear();
        for(int i=0;i<n;i++){
            sum=(sum+(long)nums[i]*(i-leftArr[i])*(rightArr[i]-i))%modulus;
        }
        return (int)sum;
    }
}}