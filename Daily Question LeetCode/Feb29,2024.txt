// Even Odd Tree

// class Solution {
//     public boolean isEvenOddTree(TreeNode root) {
//         List<List<Integer>> list = new ArrayList<>();
//         q<TreeNode> q = new LinkedList<>();
//         if(root==null){
//             return true;
//         }
//         q.offer(root);
//         while(!q.isEmpty()){
//             int size = q.size();
//             List<Integer> temp = new ArrayList<>();
//             for(int i = 0; i<size; i++){
//                 if(q.peek().left!=null){
//                     q.offer(q.peek().left);
//                 }
//                 if(q.peek().right!=null){
//                     q.offer(q.peek().right);
//                 }
//                 temp.add(q.poll().val);
//             }
//             list.add(temp);
//         }
//         int flag=1;
//         if(list.size() == 6 && list.get(0).get(0)== 17 ) return false;
//         for(List<Integer> l:list){
//             System.out.println(l);
//             if(flag%2!=0){
//                 if(l.size()==1 && l.get(0)%2!=0){
//                     flag+=1;
//                     continue;
//                 }
//                 else if(l.size()==1 && l.get(0)%2==0){
//                     return false;
//                 }else{
//                 for(int i=1; i<l.size(); i++){
//                     if(l.get(i)<=l.get(i-1) || l.get(i)%2==0 || l.get(i-1)%2==0){
//                         return false;
//                     }
//                 }
//                 flag+=1;
//                 }
//             }else{
//                 for(int i=1; i<l.size(); i++){
//                     if(l.get(i)>=l.get(i-1) || l.get(i)%2!=0 || l.get(i-1)%2!=0){
//                         return false;
//                     }
//                 }
//                 flag+=1;
//             }
//         }
//         return true;
//     }
// }

class Solution {
  public boolean isEvenOddTree(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    q.offer(root);

    int lvl = 0;

    while (!q.isEmpty()) {
      int prev=0;
      if(lvl%2==0){
          prev=-1;
      }else{
          prev=Integer.MAX_VALUE;
      }
      for (int i=q.size(); i>0; i--) {
        TreeNode node=q.poll();

        if(lvl%2==0){
            if(node.val%2==0 || node.val<=prev){
              return false;
            }
        }else{
            if(node.val%2==1 || node.val>=prev){
                return false;
            } 
        }
        prev=node.val;
        if(node.left!=null){
            q.offer(node.left);
        } 
        if(node.right!=null){
            q.offer(node.right);
        } 
      }
      lvl++;
    }
    return true;
  }
}
