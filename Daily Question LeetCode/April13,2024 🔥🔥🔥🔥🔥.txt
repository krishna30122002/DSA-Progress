// Maximal Rectangle

class Solution {
    public int solve(int[] arr){
        int n = arr.length;

        int[] rb = new int[n];
        Stack<Integer> st = new Stack<>();
        st.push(n - 1);
        rb[n - 1] = n;
        for (int i = n - 2; i >= 0; i--) {
            while (st.size() > 0 && arr[i] <= arr[st.peek()]) {
                st.pop();
            }
            if (st.size() == 0) {
                rb[i] = n;
            } else {
                rb[i] = st.peek();
            }
            st.push(i);
        }

        int[] lb = new int[n];
        st = new Stack<>();
        st.push(0);
        lb[0] = -1;
        for (int i = 1; i < n; i++) {
            while (st.size() > 0 && arr[i] <= arr[st.peek()]) {
                st.pop();
            }
            if (st.size() == 0) {
                lb[i] = -1;
            } else {
                lb[i] = st.peek();
            }
            st.push(i);
        }

        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = rb[i] - lb[i] - 1;
            int area = width * arr[i];
            maxArea=Math.max(maxArea,area);
        }
        return maxArea;
    }
    public int maximalRectangle(char[][] matrix) {
        int n=matrix.length;
        int m=matrix[0].length;
        int maxi=0;
        int[] a=new int[m];
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(matrix[i][j]=='1'){
                    a[j]++;
                }else{
                    a[j]=0;
                }
            }
            int area=solve(a);
            maxi=Math.max(maxi, area);
        }
        return maxi;
    }
}