// Pseudo-Palindromic Paths in a Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isPalindrome(int[] arr){
        int odd=0;
        for(int i=1; i<=9; i++){
            if(arr[i]%2!=0){
                odd++;
            }
        }
        if(odd>1){
            return false;
        }
        return true;
    }
    public void solve(TreeNode root, int[] res, int[] freq){
        if(root==null){
            return;
        }
        freq[root.val]++;
        if(root.left==null && root.right==null){
            if(isPalindrome(freq)){
                res[0]++;
            }
        }
        solve(root.left,res,freq);
        solve(root.right,res,freq);
        freq[root.val]--;
    }
    public int pseudoPalindromicPaths (TreeNode root) {
        int[] result=new int[1];
        int[] frequency=new int[10];
        solve(root,result,frequency);
        return result[0];
    }
}