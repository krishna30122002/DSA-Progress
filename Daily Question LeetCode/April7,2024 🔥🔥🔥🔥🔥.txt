// Valid Parenthesis String

// Using 3D DP

class Solution {
    public boolean solve(String s, int n, int idx, int open, int close, Boolean[][][] dp){
        if(open<close){
            return false;
        }
        if(idx==n){
            if(open==close){
                return true;
            }else{
                return false;
            }
        }
        if(dp[idx][open][close]!=null){
            return dp[idx][open][close];
        }
        boolean ans=false;
        char ch=s.charAt(idx);
        if(ch=='('){
            ans=solve(s,n,idx+1,open+1,close,dp);
        }else if(ch==')'){
            ans=solve(s,n,idx+1,open,close+1,dp);
        }else{
            boolean a=solve(s,n,idx+1,open,close+1,dp);
            boolean b=solve(s,n,idx+1,open+1,close,dp);
            boolean c=solve(s,n,idx+1,open,close,dp);
            ans=a||b||c;
        }
        dp[idx][open][close]=ans;
        return dp[idx][open][close];
    }
    public boolean checkValidString(String s) {
        int n=s.length();
        Boolean[][][] dp=new Boolean[101][101][101];
        return solve(s, n, 0, 0, 0, dp);
    }
}

// Using 2 Stacks

public class Solution {
    public boolean checkValidString(String s) {
        int n = s.length();
        Stack<Integer> st1 = new Stack<>();
        Stack<Integer> st2 = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '(') {
                st1.push(i);
            } else if (s.charAt(i) == '*') {
                st2.push(i);
            } else {
                if (!st1.isEmpty()) {
                    st1.pop();
                } else if (!st2.isEmpty()) {
                    st2.pop();
                } else {
                    return false;
                }
            }
        }
        
        while (!st1.isEmpty()) {
            if (st2.isEmpty()) {
                return false;
            } else if (st1.peek() < st2.peek()) {
                st1.pop();
                st2.pop();
            } else {
                return false;
            }
        }
        
        return true;
    }
}
