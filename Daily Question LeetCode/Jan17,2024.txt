// Unique Number of Occurrences

// class Solution {
//     public boolean uniqueset(int[] arr) {
//        Map<Integer,Integer> map = new HashMap<>(); 
//        for(int i=0; i<arr.length; i++){
//            if(map.containsKey(arr[i])){
//                map.put(arr[i],map.getOrDefault(arr[i],0)+1);
//            }else{
//                map.put(arr[i],1);
//            }
//         }
//         List<Integer> list=new ArrayList<>();
//         for(Map.Entry<Integer,Integer> entry:map.entrySet()){
//            list.add(entry.getValue());
//         } 
//         Collections.sort(list);
//         for(int i=1; i<list.size(); i++){
//            if(list.get(i)==list.get(i-1)){
//                return false;
//            }
//         }
//         return true;
//     }
// }

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        Set<Integer> set = new HashSet<>();
        for(int i=0; i<arr.length; i++){
           if(map.containsKey(arr[i])){
               map.put(arr[i],map.getOrDefault(arr[i],0)+1);
           }else{
               map.put(arr[i],1);
           }
        }
        for (int count : map.values()) {
            if (!set.add(count)) {
                return false;
            }
        }
        return true;
    }
}