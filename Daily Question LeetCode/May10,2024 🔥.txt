// K-th Smallest Prime Fraction

// class Pair {
//     int first;
//     int second;

//     Pair(int first, int second) {
//         this.first = first;
//         this.second = second;
//     }
// }

// class Solution {
//     public int[] kthSmallestPrimeFraction(int[] arr, int k) {
//         int n = n
// int[]a=new int[2];
//         HashMap<Pair, Double> map = new HashMap<>();
//         for (int i = 0; i < n; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (i != j) {
//                     map.put(new Pair(arr[i], arr[j]), ((double) arr[i] / arr[j]));
//                 }
//             }
//         }

//         LinkedHashMap<Pair, Double> sortedMap = map.entrySet()
//                 .stream()
//                 .sorted(Map.Entry.comparingByValue())
//                 .collect(Collectors.toMap(
//                         Map.Entry::getKey,
//                         Map.Entry::getValue,
//                         (oldValue, newValue) -> oldValue, LinkedHashMap::new));
//         Pair p = sortedMap.keySet().toArray(new Pair[0])[k - 1];
//         a[0] = p.first;
//         a[1] = p.second;
//         return a;
//     }
// }

class Solution {
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        int n=arr.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(arr[a[0]] * arr[b[1]], arr[a[1]] * arr[b[0]]));

        for (int i = 0; i < n-1; i++) {
            pq.add(new int[] { i, n-1 });
        }

        for (int i = 1; i < k; i++) {
            int[] f = pq.poll();
            int x = f[0];
            int y = f[1];

            if (y - 1 > x) {
                pq.add(new int[] { x, y - 1 });
            }
        }

        int[] a = pq.poll();
        return new int[] { arr[a[0]], arr[a[1]] };
    }
}