// Number of Islands

class Pair{
    int first;
    int second;

    public Pair(int first, int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public void bfs(int row, int col, int[][] vis, char[][] grid){
        vis[row][col]=1;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(row,col));
        int n=grid.length;
        int m=grid[0].length;

        while(!q.isEmpty()){
            int r=q.peek().first;
            int c=q.peek().second;
            q.remove();

            int[] dirRow = {-1, 0, 1, 0};
            int[] dirCol = {0, 1, 0, -1};

            for(int direction=0; direction<4; direction++){
                int nRow = r + dirRow[direction];
                int nCol = c + dirCol[direction];
                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && grid[nRow][nCol]=='1' && vis[nRow][nCol]==0){
                    vis[nRow][nCol]=1;
                    q.offer(new Pair(nRow, nCol));
                }
            }
        }
    }
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;

        int[][] vis=new int[n][m];
        int cnt=0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1' && vis[i][j]==0){
                    cnt++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return cnt;
    }
}