//Minimum Falling Path Sum
// DP Hard

class Solution {
    int solve(int[][] arr, int[][] dp, int n){
		for(int j = 0; j<n; j++){
			dp[0][j]=arr[0][j];
		}
		for(int i = 1; i<n; i++){
			for(int j = 0; j<n; j++){

				int center = arr[i][j]+dp[i-1][j];
						
				int left = arr[i][j];
				if(j-1>=0){
					left+=dp[i-1][j-1];
				}else{
					left+= (int) Math.pow(10, 9);
				}

				int right = arr[i][j];
				if(j+1<n){
					right+=dp[i-1][j+1];
				}else{
					right+=(int) Math.pow(10, 9);
				}
				dp[i][j]=Math.min(center, Math.min(left, right));
			}
		}

		int mini = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            mini = Math.min(mini, dp[n - 1][j]);
        }

		return mini;
	}
    public int minFallingPathSum(int[][] matrix) {
    int n = matrix.length;
		int[][] dp = new int[n][n];
		for(int[] row:dp){
			Arrays.fill(row, -1);
		}
		return solve(matrix,dp,n);
    }
}