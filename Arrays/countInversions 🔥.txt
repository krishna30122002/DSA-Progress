import java.util.*;

public class Solution {
    public static int merge(int[] arr, int low, int mid, int high){
        List<Integer> temp=new ArrayList<>();
        int left=low;
        int right=mid+1;
        int cnt=0;

        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                temp.add(arr[left]);
                left++;
            }else{
                temp.add(arr[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        while(left<=mid){
            temp.add(arr[left]);
            left++;
        }
        while(right<=high){
            temp.add(arr[right]);
            right++;
        }
        for(int i=low; i<=high; i++){
            arr[i]=temp.get(i-low);
        }
        return cnt;
    } 
    public static int mergeSort(int[] arr, int left, int right){
        if(left>=right){
            return 0;
        }
        int cnt=0;
        int mid=(left+right)/2;
        cnt+=mergeSort(arr, left, mid);
        cnt+=mergeSort(arr, mid+1, right);
        cnt+=merge(arr, left, mid, right);
        return cnt;
    }
    public static int numberOfInversions(int []arr, int n) {
        // Write your code here.
        return mergeSort(arr, 0, n-1);
    }
}