// class Solution {
//     public int lengthOfLongestSubstring(String str) {
//         if(str.length()==0){
//             return 0;
//         }
//         List<Character> list=new ArrayList<Character>();
//         int cnt=Integer.MIN_VALUE;
//         for(int i=0;i<str.length();i++){
//             if(!list.contains(str.charAt(i))){
//                 list.add(str.charAt(i));
//             }else{
//                 while(list.contains(str.charAt(i))) {
//                     list.remove(0);
//                 }
//                 list.add(str.charAt(i));
//             }
//             cnt=Math.max(cnt,list.size());
//         }
//         return cnt;
//     }
// }

class Solution {
    public int lengthOfLongestSubstring(String input) {
        int n = input.length();
		int l=0,r=0,size=0;
		Map<Character,Integer> map=new HashMap<>();
		while(r<n){
			char ch = input.charAt(r);
			if(map.containsKey(ch)){
				l=Math.max(map.get(ch)+1,l);
			}
			map.put(ch, r);
			size=Math.max(size,r-l+1);
			r++;
		}
		return size;
    }
}