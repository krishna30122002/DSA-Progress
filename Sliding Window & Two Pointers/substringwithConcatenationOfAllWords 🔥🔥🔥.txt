// class Solution {
//     public List<Integer> findSubstring(String s, String[] words) {
//         List<Integer> list=new ArrayList<>();
//         int n=words.length;
//         int len=words[0].length();
//         if(s.length()<(n*len)){
//             return list;
//         }
//         for(int i=0; i<=(s.length()-(n*len)); i++){
//             Map<String,Integer> map=new HashMap<>();
//             for(int j=0; j<n; j++){
//                 map.put(words[j],map.getOrDefault(words[j],0)+1);
//             }
//             int temp;
//             for(temp=0; temp<n; temp++){
//                 String str = s.substring(i+temp*len,i+(temp+1)*len);
//                 if(!map.containsKey(str)){
//                     break;
//                 }else{
//                     if(map.get(str)!=0){
//                         map.put(str,map.get(str)-1);
//                     }else{
//                         break;
//                     }
//                 }
//                 if(temp==n-1){
//                     list.add(i);
//                 }
//             }
//         }
//         return list;
//     }
// }

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        int n=words.length;
        int len=words[0].length();
        
        if (s.length()<(n*len)) {
            return result;
        }

        Map<String,Integer> wordCnt=new HashMap<>();
        for (String word:words) {
            wordCnt.put(word,wordCnt.getOrDefault(word, 0) + 1);
        }

        for (int i=0; i<=s.length()-n*len; i++) {
            Map<String,Integer> map=new HashMap<>();
            int j;
            for (j=0; j<n; j++) {
                int start=i+j*len;
                int end=start+len;
                String word=s.substring(start,end);

                if (!wordCnt.containsKey(word)) {
                    break;
                }

                map.put(word,map.getOrDefault(word,0)+1);

                if (map.get(word)>wordCnt.get(word)) {
                    break;
                }
            }
            if(j==n) {
                result.add(i);
            }
        }
        return result;
    }
}
