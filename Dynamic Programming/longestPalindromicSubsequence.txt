class Solution {
    public int solve(int idx1, int idx2, String text1, String text2, int[][] dp){
        if(idx1<0 || idx2<0){
            return 0;
        }
        if(dp[idx1][idx2]!=-1){
            return dp[idx1][idx2];
        }
        if(text1.charAt(idx1)==text2.charAt(idx2)){
            dp[idx1][idx2]=1+solve(idx1-1,idx2-1,text1,text2,dp);
        }else{
            dp[idx1][idx2]=0+Math.max(solve(idx1-1,idx2,text1,text2,dp),solve(idx1,idx2-1,text1,text2,dp));
        }
        return dp[idx1][idx2];
    }
    public int longestPalindromeSubseq(String s) {
        String t = "";
        char ch;

        // Reversing a String
        for (int i=0; i<s.length(); i++)
        {
           ch = s.charAt(i);
           t = ch + t;
        }

        int n = s.length();

        int[][] dp = new int[n][n+1];
        for(int[] row:dp){
            Arrays.fill(row, -1);
        }
        return solve(n-1, n-1, s, t, dp);
    }
}