// c++ code - running

int solve(const std::string& s1, const std::string& s2, std::vector<std::vector<int>>& dp) {
        int n = s1.length();
        int m = s2.length();

        for (int i = 0; i <= n; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j <= m; j++) {
            dp[0][j] = 0;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = std::max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][m];
    }
string findLCS(int n, int m,string &s1, string &s2){
	// Write your code here.	
	std::vector<std::vector<int>> dp(n + 1, std::vector<int>(m + 1, 0));
        int len = solve(s1, s2, dp);
        int i = n;
        int j = m;

        std::string str = "";

        while (i > 0 && j > 0) {
            if (s1[i - 1] == s2[j - 1]) {
                str = s1[i - 1] + str;
                i--;
                j--;
            } else if (dp[i - 1][j] > dp[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }
        return str;
}


// java code - runtime error

import java.util.*;

class Solution {
    public static int solve(String s1, String s2, int[][] dp) {
        int n = s1.length();
        int m = s2.length();

        for (int i = 0; i <= n; i++) {
            dp[i][0] = 0;
        }
        for (int j = 0; j <= m; j++) {
            dp[0][j] = 0;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[n][m];
    }

    public static String findLCS(int n, int m, String s1, String s2) {
        int[][] dp = new int[n + 1][m + 1];
        for(int[] row:dp){
            Arrays.fill(row, 0);
        }
        int len = solve(s1, s2, dp);
        int i = n;
        int j = m;

        String str = "";

        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                str = s1.charAt(i - 1) + str;
                i--;
                j--;
            } else if (dp[i - 1][j] > dp[i][j - 1]) {
                i--;
            } else {
                j--;
            }
        }
        return str;
    }
}
