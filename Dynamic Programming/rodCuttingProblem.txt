import java.util.Arrays;

public class Solution {
	public static int solve(int idx, int[] arr, int N, int[][] dp) {
		if (idx == 0) {
			return N * arr[0];
		}
		if (dp[idx][N] != -1) {
			return dp[idx][N];
		}
		int notTake = solve(idx - 1, arr, N, dp);
		int take = Integer.MIN_VALUE;
		int rodLength = idx + 1;
		if (rodLength <= N) {
			take = arr[idx] + solve(idx, arr, N - rodLength, dp);
		}
		dp[idx][N] = Math.max(take, notTake);
		return dp[idx][N];
	}

	public static int cutRod(int price[], int n) {
		// Write your code here.
		int[][] dp = new int[n][n+1];
		for(int[] row:dp){
			Arrays.fill(row, -1);
		}
		return solve(n-1, price, n, dp);
	}
}