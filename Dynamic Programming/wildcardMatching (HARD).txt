import java.util.Arrays;
public class Solution {

    public static boolean wildcardMatching(String pattern, String text) {
        int n = pattern.length();
        int m = text.length();
        int[][] dp = new int[n][m];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(n - 1, m - 1, pattern, text, dp);
    }

    public static boolean solve(int idx1, int idx2, String s1, String s2, int[][] dp) {
        if (idx1 < 0 && idx2 < 0) {
            return true;
        }
        if (idx1 < 0 && idx2 >= 0) {
            return false;
        }
        if (idx1 >= 0 && idx2 < 0) {
            for (int i = 0; i <= idx1; i++) {
                if (s1.charAt(i) != '*') {
                    return false;
                }
            }
            return true;
        }
        if (dp[idx1][idx2] != -1) {
            return dp[idx1][idx2] == 1;
        }
        if (s1.charAt(idx1) == s2.charAt(idx2) || s1.charAt(idx1) == '?') {
            dp[idx1][idx2] = solve(idx1 - 1, idx2 - 1, s1, s2, dp) ? 1 : 0;
        } else if (s1.charAt(idx1) == '*') {
            dp[idx1][idx2] = (solve(idx1, idx2 - 1, s1, s2, dp) || solve(idx1 - 1, idx2, s1, s2, dp)) ? 1 : 0;
        } else {
            dp[idx1][idx2] = 0;
        }
        return dp[idx1][idx2] == 1;
    }
}



