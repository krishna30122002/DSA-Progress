// Memoization & Tabulation

import java.util.*;
public class Solution {
    public static List< Integer > printingLongestIncreasingSubsequence(int []arr, int n) {
        int[] dp=new int[n];
        Arrays.fill(dp,1);
        int[] hash=new int[n];
        Arrays.fill(hash,1);
        
        for(int i=0; i<=n-1; i++){
            
            hash[i] = i;
            for(int prevIdx = 0; prevIdx <=i-1; prevIdx ++){
                
                if(arr[prevIdx]<arr[i] && 1 + dp[prevIdx] > dp[i]){
                    dp[i] = 1 + dp[prevIdx];
                    hash[i] = prevIdx;
                }
            }
        }
        
        int ans = -1;
        int lastIdx =-1;
        
        for(int i=0; i<=n-1; i++){
            if(dp[i]> ans){
                ans = dp[i];
                lastIdx = i;
            }
        }
        
        ArrayList<Integer> temp=new ArrayList<>();
        temp.add(arr[lastIdx]);
        
        while(hash[lastIdx] != lastIdx){
            lastIdx = hash[lastIdx];
            temp.add(arr[lastIdx]);    
        }
        List<Integer> result = new ArrayList<>();
        for(int i=temp.size()-1; i>=0; i--){
            result.add(temp.get(i));
        }
        return result;
    }
}