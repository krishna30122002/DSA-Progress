class Solution {
    public int solve(int row, int col1, int col2, int n, int m, int[][] grid, int[][][] dp){
        if(col1<0 || col1>=m || col2<0 || col2>=m){
            return Integer.MIN_VALUE;
        }
        if(row==n-1){
            if(col1==col2){
                return grid[row][col1];
            }else{
                return (grid[row][col1]+grid[row][col2]);
            }
        }
        if(dp[row][col1][col2]!=-1){
            return dp[row][col1][col2];
        }
        int result=0;
        for(int i=-1; i<=1; i++){
            for(int j=-1; j<=1; j++){
                int temp=0;
                if(col1==col2){
                    temp=grid[row][col1]+solve(row+1,col1+i,col2+j,n,m,grid,dp);
                }else{
                    temp=grid[row][col1]+grid[row][col2]+solve(row+1,col1+i,col2+j,n,m,grid,dp);
                }
                result=Math.max(result,temp);
            }
        }
        dp[row][col1][col2]=result;
        return dp[row][col1][col2];
    }
    public int cherryPickup(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int[][][] dp=new int[n+1][m+1][m+1];
        for(int[][] row1 : dp){
            for(int[] row2 : row1){
                Arrays.fill(row2, -1);
            }
        }
        return solve(0,0,m-1,n,m,grid,dp);
    }
}