import java.util.*;
import java.io.*;

public class Solution {
    static int mod = 1000000007;
    public static int solve(int idx, int[] arr, int[][] dp, int target){
        if(idx==0){
            if(target == 0 && arr[0]==0){
                return 2;
            }else if(target == 0 || target==arr[0]){
                return 1;
            }else{
                return 0;
            }
        }
        if(dp[idx][target]!=-1){
            return dp[idx][target];
        }
        int notTake = solve(idx-1, arr, dp, target)%mod;
        int take = 0;
        if(arr[idx]<=target){
            take = solve(idx-1, arr, dp, target-arr[idx])%mod;
        }
        dp[idx][target]=notTake+take;

        return dp[idx][target]%mod;
    }
    public static int findWays(int num[], int target) {
        // Write your code here.
        int n = num.length;
        int[][] dp = new int[n][target+1];
        for(int[] row:dp){
            Arrays.fill(row, -1);
        }
        return solve(n-1,num,dp,target);
    }
}