//Similar to Stocks 3

//Memoization

class Solution {
    public int solve(int idx, int buy, int k, int[] arr, int n, int[][][] dp){
        if(idx == n || k == 0){
            return 0;
        }
        if(dp[idx][buy][k]!=-1){
            return dp[idx][buy][k];
        }
        int profit = 0;
        if(buy == 1){
            profit = Math.max((-arr[idx]+solve(idx+1, 0, k, arr, n, dp)),(0+solve(idx+1, 1, k, arr, n, dp)));
        }
        if(buy == 0){
            profit = Math.max((arr[idx]+solve(idx+1, 1, k-1, arr, n, dp)),(0+solve(idx+1, 0, k, arr, n, dp)));
        }
        return dp[idx][buy][k]=profit;
    }
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        // int limit = 2;
        int[][][] dp = new int[n][2][k+1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 2; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return solve(0,1,k,prices,n,dp);
    }
}

// Space Optimised

import java.util.* ;
import java.io.*; 
public class Solution
{
public static int maximumProfit(int[] prices, int n, int k)
    {
        // Write your code here.
        int[][] ahead = new int[2][k+1];
        int[][] curr = new int[2][k+1];

        for (int j = 0; j < 2; j++) {
            Arrays.fill(ahead[j], 0);
            Arrays.fill(curr[j], 0);
        }

        for (int idx = n - 1; idx >= 0; idx--) {
            for (int buy = 0; buy <= 1; buy++) {
                for (int limit = 1; limit <= k; limit++) {
                    int profit = 0;
                    if (buy == 1) {
                        profit = Math.max((-prices[idx] + ahead[0][limit]),
                                (0 + ahead[1][limit]));
                    } else {
                        profit = Math.max((prices[idx] + ahead[1][limit-1]),
                                (0 + ahead[0][limit]));
                    }
                    curr[buy][limit] = profit;
                }
            }
            System.arraycopy(curr[0], 0, ahead[0], 0, k+1);
            System.arraycopy(curr[1], 0, ahead[1], 0, k+1);
        }

        return ahead[1][k];
    }
}

