import java.util.*;
import java.io.*;

public class Solution {
    public static int solve(int idx, int[] arr, int[][] dp, int target) {
        if (idx == 0) {
            if (target == 0 && arr[0] == 0) {
                return 2;
            } else if (target == 0 || target == arr[0]) {
                return 1;
            } else {
                return 0;
            }
        }
        if (dp[idx][target] != -1) {
            return dp[idx][target];
        }
        int notTake = solve(idx - 1, arr, dp, target);
        int take = 0;
        if (arr[idx] <= target) {
            take = solve(idx - 1, arr, dp, target - arr[idx]);
        }
        dp[idx][target] = notTake + take;

        return dp[idx][target];
    }

    public static int countPartitions(int n, int d, int[] num) {
        // Write your code here.

        int sum = 0;
        for (int i : num) {
            sum += i;
        }
        int target = (sum - d);
        if (target < 0 || target % 2 != 0) {
            return 0;
        } else {
            int[][] dp = new int[n][target + 1];
            for (int[] row : dp) {
                Arrays.fill(row, -1);
            }
            return solve(n - 1, num, dp, target / 2);
        }
    }

    public static int targetSum(int n, int target, int[] arr) {
        // Write your code here.
        return countPartitions(n, target, arr);
    }
}