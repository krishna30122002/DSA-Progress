// Memoization

class Solution {
    public int solve(int idx, int prevIdx, int[] arr, int n, int[][] dp){
        if(idx==n){
            return 0;
        }
        if(dp[idx][prevIdx+1]!=-1){
            return dp[idx][prevIdx+1];
        }
        int notTake = 0+solve(idx+1,prevIdx, arr, n, dp);
        int take = 0;
        if(prevIdx==-1 || arr[idx]>arr[prevIdx]){
            take = 1+solve(idx+1,idx, arr, n, dp);
        }
        dp[idx][prevIdx+1]=Math.max(take, notTake);
        return dp[idx][prevIdx+1];
    }
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n+1];
        for(int[] row:dp){
            Arrays.fill(row, -1);
        }
        return solve(0, -1, nums, n, dp);
    }
}