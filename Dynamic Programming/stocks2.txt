//Memoization

class Solution {
    public int solve(int idx, int buy, int[] arr, int n, int[][] dp){
        if(idx==n){
            return 0;
        }
        if(dp[idx][buy]!=-1){
            return dp[idx][buy];
        }
        int profit = 0;
        if(buy==1){
            profit = Math.max((-arr[idx]+solve(idx+1, 0, arr, n, dp)),(0+solve(idx+1, 1, arr, n, dp)));
        }else{
            profit = Math.max((arr[idx]+solve(idx+1, 1, arr, n, dp)),(0+solve(idx+1, 0, arr, n, dp)));
        }
        return dp[idx][buy]=profit;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp=new int[n][2];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,1,prices,n,dp);
    }
}


//Space Optimized

import java.util.Arrays;

public class Solution {

    public static long getMaximumProfit(int n, long[] arr) {
        // Your code goes here.
        long[] ahead = new long[2];
        long[] curr = new long[2];
        ahead[0] = ahead[1] = 0;
        long profit = 0;
        for (int idx = n - 1; idx >= 0; idx--) {
            for (int buy = 0; buy < 2; buy++) {
                if (buy == 0) {
                    profit = Math.max((-arr[idx] + ahead[1]), (0 + ahead[0]));
                }
                if (buy == 1){
                    profit = Math.max((arr[idx] + ahead[0]), (0 + ahead[1]));
                }
                curr[buy] = profit;
            }
            System.arraycopy(curr, 0, ahead, 0, 2);
        }
        return curr[0];
    }
}
