class Solution {

    public static int solve(int idx, int arr[], int dp[][], int target){
        if(idx == 0){
            if(target%arr[0]==0){
                return target/arr[0];
            }else{
                return (int) Math.pow(10, 9);
            }
        }

        if(dp[idx][target]!=-1){
            return dp[idx][target];
        }

        int notTake = solve(idx-1, arr, dp, target);
        int take = (int) Math.pow(10, 9);
        if(arr[idx]<=target){
            take = 1 + solve(idx, arr, dp, target-arr[idx]);
        }
        dp[idx][target] = Math.min(take, notTake);
        return dp[idx][target];
    }
    
    public int coinChange(int[] coins, int amount) {

        int n = coins.length;

        int[][] dp = new int[n][target+1];
        for(int[] row:dp){
            Arrays.fill(row, -1);
        }
        int x = solve(n-1,coins,dp,target);
        if(x>=(int) Math.pow(10, 9)){
            return -1;
        }
        return x;
    }
}     