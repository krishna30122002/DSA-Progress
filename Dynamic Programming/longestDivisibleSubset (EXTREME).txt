// Tabulation

class Solution {
    public List<Integer> largestDivisibleSubset(int[] arr) {
        int n = arr.length;
        int[] dp=new int[n];
        Arrays.fill(dp,1);
        int[] hash=new int[n];
        Arrays.fill(hash,1);

        Arrays.sort(arr);
        
        for(int i=0; i<n; i++){
            
            hash[i] = i;
            for(int prevIdx = 0; prevIdx <i; prevIdx ++){
                
                if((arr[i]%arr[prevIdx]==0) && (1 + dp[prevIdx] > dp[i])){
                    dp[i] = 1 + dp[prevIdx];
                    hash[i] = prevIdx;
                }
            }
        }
        
        int ans = 1;
        int lastIdx = 0;
        
        for(int i=0; i<=n-1; i++){
            if(dp[i]> ans){
                ans = dp[i];
                lastIdx = i;
            }
        }
        
        ArrayList<Integer> temp=new ArrayList<>();
        temp.add(arr[lastIdx]);
        
        while(hash[lastIdx] != lastIdx){
            lastIdx = hash[lastIdx];
            temp.add(arr[lastIdx]);    
        }

        // Reversing the ArrayList
        List<Integer> result = new ArrayList<>();
        for(int i=temp.size()-1; i>=0; i--){
            result.add(temp.get(i));
        }
        return result;
    }
}

// Another Failed Approach


// List<Integer> list = new ArrayList<>();
        // for(int i = 0; i<nums.length; i++){
        //     for(int j = i+1; j<nums.length; j++){
        //         if(nums[i]%nums[j]==0 || nums[j]%nums[i]==0){
        //             if(!list.contains(nums[i])){
        //                 list.add(nums[i]);
        //             }
        //             if(!list.contains(nums[j])){
        //                 list.add(nums[j]);
        //             }
        //         }
        //     }
        // }

        // Arrays.sort(nums);
        // list.add(nums[0]);
        // for(int i = 1; i<nums.length; i++){
        //     if(nums[i]%list.get(list.size()-1)==0 || list.get(list.size()-1)%nums[i]==0){
        //         if(!list.contains(nums[i])){
        //             list.add(nums[i]);
        //         }
        //     }
        // }
        // return list;