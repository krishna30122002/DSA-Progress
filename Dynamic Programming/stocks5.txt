// Memoization

class Solution {
    public int solve(int idx, int buy, int[] arr, int n, int[][] dp){
        if(idx>=n){
            return 0;
        }
        if(dp[idx][buy]!=-1){
            return dp[idx][buy];
        }
        int profit = 0;
        if(buy==1){
            profit = Math.max((-arr[idx]+solve(idx+1, 0, arr, n, dp)),(0+solve(idx+1, 1, arr, n, dp)));
        }else{
            profit = Math.max((arr[idx]+solve(idx+2, 1, arr, n, dp)),(0+solve(idx+1, 0, arr, n, dp)));
        }
        return dp[idx][buy]=profit;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp=new int[n][2];
        for(int[] row:dp){
            Arrays.fill(row,-1);
        }
        return solve(0,1,prices,n,dp);
    }
}


// Tabulation

import java.util.Arrays;

public class Solution {
    public static int stockProfit(int[] prices) {
        // Write your code here.
        int n = prices.length;
        int[][] dp = new int[n+2][2];
        for(int[] row:dp){
            Arrays.fill(row, 0);
        }
        for(int i = n-1; i>=0; i--){
            for(int buy = 0; buy<=1; buy++){
                if(buy==1){
                dp[i][buy] = Math.max((-prices[i]+dp[i+1][0]), (0+dp[i+1][1]));
                }else if(buy == 0){
                    dp[i][buy] = Math.max((prices[i]+dp[i+2][1]), (0+dp[i+1][0]));
                }
            }
        }
        return dp[0][1];
    }
}


// SPACE OPTIMISATION IS NOT POSSIBLE BECAUSE OF IDX+2