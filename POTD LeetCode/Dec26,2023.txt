// Number of Dice Rolls With Target Sum

class Solution {
    public int numRollsToTarget(int n, int k, int target) {
        int[][] dp = new int[n + 1][target + 1];
        for (int[] row : dp) {
            Arrays.fill(row, 0);
        }
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                int cnt = 0;
                for (int t = 1; t <= k; t++) {
                    if (j - t >= 0) {
                        cnt = (cnt + dp[i - 1][j - t]) % 1000000007;
                    }
                }
                dp[i][j] = cnt;
            }
        }
        return dp[n][target];
    }
}
// class Solution{
    // public int solve(int n, int k, int target, int[][] dp) {
    //     if (target < 0) {
    //         return 0;
    //     }
    //     if (target == 0 && n == 0) {
    //         return 1;
    //     }
    //     if (target != 0 && n == 0) {
    //         return 0;
    //     }
    //     if (target == 0 && n != 0) {
    //         return 0;
    //     }
    //     if (dp[n][target] != -1) {
    //         return dp[n][target] % 1000000007;
    //     }
    //     int cnt = 0;
    //     for (int i = 1; i <= k; i++) {
    //         cnt += solve(n - 1, k, target - i, dp);
    //     }
    //     dp[n][target] = cnt;
    //     return dp[n][target] % 1000000007;
    // }
// }

// public int numRollsToTarget(int n, int k, int target) {
        // int[][] dp = new int[n + 1][target + 1];
        // for (int[] row : dp) {
        //     Arrays.fill(row, -1);
        // }
        // return solve(n, k, target, dp);
    // }
// }