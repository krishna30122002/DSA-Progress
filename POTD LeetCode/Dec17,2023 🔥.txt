// Design a Food Rating System

// VERY HARD LEETCODE

// I DON'T GET IT ... SAW THE SOLUTION VIDEO TO SOLVE THIS QUESTION.
// NEED TO PRACTICE HARD TO GET THE CONCEPTS USED IN THIS QUESTION

class FoodRatings {

    public class Information{
        String food;
        String cuisine;
        int rating;

        public Information(String food, String cuisine, int rating){
            this.food = food;
            this.cuisine = cuisine;
            this.rating = rating;
        }
    }

    Map<String, PriorityQueue<Information>> cuisineMap;
    Map<String,Information> foodMap;

    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        cuisineMap = new HashMap<>();
        foodMap = new HashMap<>();

        for(int i = 0; i<foods.length; i++){
            Information obj = new Information(foods[i],cuisines[i],ratings[i]);
            foodMap.put(foods[i],obj);
            if(cuisineMap.containsKey(cuisines[i])){
                cuisineMap.get(cuisines[i]).add(obj);
            }else{
                PriorityQueue<Information> pq = new PriorityQueue<Information>(new Comparator<Information>()    {
                    @Override
                    public int compare(Information a, Information b){
                        int result = b.rating-a.rating;
                        if(result==0){
                            return (a.food).compareTo(b.food);
                        }
                        return result;
                    }
                });
                pq.add(obj);
                cuisineMap.put(cuisines[i],pq);
            }
        }
    }
    
    public void changeRating(String food, int newRating) {
        Information prev = foodMap.get(food);
        Information curr = new Information(food,prev.cuisine, newRating);
        foodMap.put(food,curr);
        prev.food = "";
        cuisineMap.get(prev.cuisine).add(curr);
    }
    
    public String highestRated(String cuisine) {
        while(cuisineMap.get(cuisine).peek().food.equals("")){
            cuisineMap.get(cuisine).remove();
        }
        return cuisineMap.get(cuisine).peek().food;
    }
}

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings obj = new FoodRatings(foods, cuisines, ratings);
 * obj.changeRating(food,newRating);
 * String param_2 = obj.highestRated(cuisine);
 */