// Minimum Difficulty of a Job Schedule

// VERY HARD LEETCODE

// Recursive Approach

class Solution {
    public int solve(int idx, int[] a) {
        int maxi = Integer.MIN_VALUE;
        for (int i = idx; i < a.length; i++) {
            maxi = Math.max(maxi, a[i]);
        }
        return maxi;
    }

    private int realSolve(int[] arr, int[][] dp, int idx, int days) {
        if (days == 0 && idx == arr.length) {
            return 0;
        }
        if (days == 0 || idx == arr.length) {
            return Integer.MAX_VALUE;
        }

        if (dp[idx][days] != -1) {
            return dp[idx][days];
        }

        int maxD = Integer.MIN_VALUE;
        int res = Integer.MAX_VALUE;

        for (int j = idx; j < arr.length; j++) {
            maxD = Math.max(maxD, arr[j]);
            int c = realSolve(arr, dp, j + 1, days - 1);
            if (c != Integer.MAX_VALUE) {
                res = Math.min(res, c + maxD);
            }
        }

        dp[idx][days] = res;
        return res;
    }

    public int minDifficulty(int[] arr, int d) {
        int n = arr.length;
        int[][] dp = new int[n][d + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        if (n < d) {
            return -1;
        }
        for (int i = 0; i < n; i++) {
            dp[i][1] = solve(i, arr);
        }
        return realSolve(arr, dp, 0, d);
    }
}


//Tabulation Approach


// class Solution {
//     public int solve(int idx, int[] a){
//         int maxi = Integer.MIN_VALUE;
//         for(int i = idx; i<a.length; i++){
//             maxi=Math.max(maxi,a[i]);
//         }
//         return maxi;
//     }
//     public int minDifficulty(int[] arr, int d) {
//         int n = arr.length;
//         int[][] dp = new int[n][d+1];
//         for(int[] row:dp){
//             Arrays.fill(row,-1);
//         }
//         if(n<d){
//             return -1;
//         }
//         for(int i = 0; i<n; i++){
//             dp[i][1]=solve(i,arr);
//         }
//         for(int days=2; days<=d; days++){
//             for(int i=0; i<=n-days; i++){
//                 int maxD = Integer.MIN_VALUE;
//                 int res = Integer.MAX_VALUE;
//                 for(int j=i; j<=n-days; j++){
//                     maxD=Math.max(maxD,arr[j]);
//                     res=Math.min(res,(dp[j+1][days-1]+maxD));
//                 }
//                 dp[i][days]=res;
//             }
//         }
//         return dp[0][d];
//     }
// }