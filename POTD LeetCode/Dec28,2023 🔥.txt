// String Compression II

// VERY HARD LEETCODE

// I DON'T GET IT ... SAW THE SOLUTION VIDEO TO SOLVE THIS QUESTION.
// NEED TO PRACTICE HARD TO GET THE CONCEPTS USED IN THIS QUESTION

// GOT FED UP WITH QUESTION LOLxd DIDN't UNDERSTOOD MUCH

// WILL TRY TO UNDERSTAND IT WHEN I LEARN ADVANCED DP

// INSTEAD I DID STRING COMPRESSION I

class Solution {
    int[][] dp;
    int n;
    
    public int getLengthOfOptimalCompression(String s, int k) {
        n = s.length();
        dp = new int[n][k + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(0, k, s);
    }
    
    private int solve(int i, int k, String s) {
        if (k < 0){
            return n;
        } 
        if (n <= i + k){
            return 0;
        } 
        if (dp[i][k] != -1){
            return dp[i][k];
        } 
        dp[i][k] = solve(i + 1, k - 1,s);
        int len = 0, cnt = 0, diff = 0;

        for (int j = i; j <n && diff <= k; j++) {
            if (s.charAt(j) == s.charAt(i)) {
                cnt++;
                if (cnt <= 2 || cnt == 10 || cnt == 100){
                    len++;
                } 
            } else {
                diff++;
            }
            dp[i][k] = Math.min(dp[i][k], len + solve(j + 1, k - diff,s));
        }
        return dp[i][k];
    }
}