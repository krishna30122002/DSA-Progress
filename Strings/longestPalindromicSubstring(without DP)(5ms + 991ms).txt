class Solution {
    public int[] solve(char[] s, int n, int mid) {
        int[] res = new int[2];
        int midLeft = mid-1, midRight = mid+1;

        while (midLeft >= 0 && midRight < n && s[midLeft] == s[mid] && s[midRight] == s[mid]) {
            midLeft--;
            midRight++;
        }
        if (midRight < n && s[mid] == s[midRight]) {
            midRight++;
        }
        if (midLeft >= 0 && s[mid] == s[midLeft]) {
            midLeft--;
        }
        
        while (midLeft >= 0 && midRight < n) {
            if (s[midLeft] == s[midRight]) {
                midLeft--;
                midRight++;
            } else {
                break;
            } 
        }

        res[0] = midLeft+1;
        res[1] = midRight-1;

        return res;
    }

    public String longestPalindrome(String s) {
        int maxi = 0, i=1;
        int[] maxiStr = {0,0};
        char[] arr = s.toCharArray();
        int n=arr.length;
        while (i<n) {
            int[] res = solve(arr, n, i);
            if ((res[1] - res[0] + 1) > maxi) {
                maxi = res[1] - res[0] + 1;
                maxiStr = res;
            }
            i++;
        }
        return new String(Arrays.copyOfRange(arr, maxiStr[0], maxiStr[1]+1));
    }
}

// class Solution {
//     public boolean isPalindrome(String str){
//         int i=0; 
//         int j=str.length()-1;
//         while(i<j){
//             if(str.charAt(i)!=str.charAt(j)){
//                 return false;
//             }
//             i++;
//             j--;
//         }
//         return true;
//     }
//     public String longestPalindrome(String s) {
//         int n=n();
//         String res="";
//         int maxiStr=0;
//         for(int i=0; i<n; i++){
//             for(int j=i; j<n; j++){
//                 String temp=s.substring(i,j+1);
//                 int m=temp.length();
//                 if(m>maxiStr && isPalindrome(temp)){
//                     maxiStr=m;
//                     res=temp;
//                 }
//             }
//         }
//         return res;
//     }
// }
